apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: cnpg-plugin-wal-g
    app.kubernetes.io/managed-by: kustomize
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: cnpg-plugin-wal-g
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: cnpg-plugin-wal-g
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: cnpg-plugin-wal-g
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        # Projects are configured by default to adhere to the "restricted" Pod Security Standards.
        # This ensures that deployments meet the highest security requirements for Kubernetes.
        # For more details, see: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - args:
          - operator
          - --leader-elect
          - --health-probe-bind-address=:8081
          - --cnpg-i-bind-address=:9090
          - --cnpg-i-cert-path=/tls/cnpgi-server
          - --cnpg-i-client-cert-path=/tls/cnpgi-client
          - --cnpg-i-pg-sidecar-image=$(SIDECAR_IMAGE)
        env:
        - name: SIDECAR_IMAGE
          value: ${IMG}:${TAG}
        image: ${IMG}:${TAG}
        name: manager
        ports: []
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - mountPath: /tls/cnpgi-server
          name: cnpgi-server
        - mountPath: /tls/cnpgi-client
          name: cnpgi-client
        - mountPath: /run/secrets/cnpg-plugin-wal-g/webhook
          name: webhook-certificates
      volumes:
      - name: cnpgi-server
        secret:
          secretName: cnpg-plugin-wal-g-server-tls
      - name: cnpgi-client
        secret:
          secretName: cnpg-plugin-wal-g-client-tls
      - name: webhook-certificates
        secret:
          optional: true
          secretName: cnpg-plugin-wal-g-webhook-cert
          defaultMode: 420
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
